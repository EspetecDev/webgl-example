var canvas;
var gl;
var squareVerticesBuffer;
var squareVerticesColorBuffer;
var mvMatrix;
var shaderProgram;
var vertexPositionAttribute;
var vertexColorAttribute;
var perspectiveMatrix;
var squareRotation = 0.0;

var i = 0.0;
var j = 0.0;


function start(){
	canvas = document.getElementById("glCanvas");

	initWebGL(canvas);

	if(gl){
		update();
	}

	console.log('test');
}

function initWebGL(canvas){
	gl = null;

	try{
		// If regular context fails, return to experimental
		gl = canvas.getContext("webgl");// || canvas.getContext("experimental-webgl");
	} catch(e){}

	if(!gl){
		alert("Couldn't initialize webgl");
		gl = null;
	}

	return gl;
}

function update(){

		gl.clearColor(0.0, 0.0, 0.0, 1.0);
		gl.clearDepth(1.0);
		gl.enable(gl.DEPTH_TEST);
		gl.depthFunc(gl.LEQUAL);

		initShaders();
		initBuffers();

		setInterval(drawScene, 15);

}

function initShaders(){
	var fragmentShader = getShader(gl, 'shader-fs');
	var vertexShader = getShader(gl, 'shader-vs');

	// Create shader program
	shaderProgram = gl.createProgram();
	gl.attachShader(shaderProgram, vertexShader);
	gl.attachShader(shaderProgram, fragmentShader);
	gl.linkProgram(shaderProgram);

	if(!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS))
		console.log("Unable to init shader program: " + gl.getProgramInfoLog(shaderProgram));

	gl.useProgram(shaderProgram);

	vertexPositionAttribute = gl.getAttribLocation(shaderProgram, 'aVertexPosition');
	gl.enableVertexAttribArray(vertexPositionAttribute);

	vertexColorAttribute = gl.getAttribLocation(shaderProgram, 'aVertexColor');
	gl.enableVertexAttribArray(vertexColorAttribute);
}

function getShader(gl, id, type){
	var shaderScript, shader;

	shaderScript = document.getElementById(id);

	if(!shaderScript)
		return null;

	var theSource = "";
	var currentChild = shaderScript.firstChild;

	while(currentChild){
		if(currentChild.nodeType == 3)
			theSource += currentChild.textContent;

		currentChild = currentChild.nextSibling;
	}


	if(shaderScript.type == 'x-shader/x-fragment')
		shader = gl.createShader(gl.FRAGMENT_SHADER);
	else if(shaderScript.type == 'x-shader/x-vertex')
		shader = gl.createShader(gl.VERTEX_SHADER);
	else
		return null;


	// shader = gl.createShader(type);

	gl.shaderSource(shader, theSource);

	// Compile the shader program
	gl.compileShader(shader);

	// Check if successful
	if(!gl.getShaderParameter(shader, gl.COMPILE_STATUS)){
		console.log('An error ocurred compiling the shaders: ' + gl.getShaderInfoLog(shader));
		gl.deleteShader(shader);
		return null;
	}

	return shader;
}

var horizAspect = 480.0/640.0;

function initBuffers(){
	squareVerticesBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);

	var vertices = [
		1.0, 1.0, 0.0,
		-1.0, 1.0, 0.0,
		1.0, -1.0, 0.0,
		-1.0, -1.0, 0.0
	];
	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);

	squareVerticesColorBuffer = gl.createBuffer();
	gl.bindBuffer(gl.ARRAY_BUFFER, squareVerticesColorBuffer);

	var colors = [
		1.0, 1.0, 1.0, 1.0, // white
		1.0, 0.0, 0.0, 1.0, // red
		0.0, 1.0, 0.0, 1.0, // green
		0.0, 0.0, 1.0, 1.0 // blue
	];

	gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW);
}

function drawScene(){
	gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);

	perspectiveMatrix = makePerspective(45, 640.0/480.0, 0.1, 100.0);

	loadIdentity();
	// x, y, z
	mvTranslate([-0.0, 0.0, -(j%15)]);
	j += 0.1;

	mvPushMatrix();
	mvRotate(squareRotation, [1, 0, 1]);

	gl.bindBuffer(gl.ARRAY_BUFFER, squareVerticesBuffer);
	gl.vertexAttribPointer(vertexPositionAttribute, 3, gl.FLOAT, false, 0, 0);

	gl.bindBuffer(gl.ARRAY_BUFFER, squareVerticesColorBuffer);
	gl.vertexAttribPointer(vertexColorAttribute, 4, gl.FLOAT, false, 0, 0);

	setMatrixUniforms();
	gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);

	mvPopMatrix();
}


// Matrix utility functions
function loadIdentity(){
	mvMatrix = Matrix.I(4);
}

function multMatrix(m){
	mvMatrix = mvMatrix.x(m);
}
function mvTranslate(v){
	multMatrix(Matrix.Translation($V([v[0], v[1], v[2]])).ensure4x4());
}
function setMatrixUniforms(){
	var pUniform = gl.getUniformLocation(shaderProgram, "uPMatrix");
	gl.uniformMatrix4fv(pUniform, false, new Float32Array(perspectiveMatrix.flatten()));

	var mvUniform = gl.getUniformLocation(shaderProgram, "uMVMatrix");
	gl.uniformMatrix4fv(mvUniform, false, new Float32Array(mvMatrix.flatten()));
}

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}
async function usleep(ms){
	await sleep(ms);
}
